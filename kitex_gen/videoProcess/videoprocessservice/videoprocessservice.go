// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoprocessservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"runedance_douyin/kitex_gen/videoProcess"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoProcessServiceServiceInfo
}

var videoProcessServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoProcessService"
	handlerType := (*videoprocess.VideoProcessService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getVideoInfo": kitex.NewMethodInfo(getVideoInfoHandler, newVideoProcessServiceGetVideoInfoArgs, newVideoProcessServiceGetVideoInfoResult, false),
		"uploadVideo":  kitex.NewMethodInfo(uploadVideoHandler, newVideoProcessServiceUploadVideoArgs, newVideoProcessServiceUploadVideoResult, false),
		"getVideoList": kitex.NewMethodInfo(getVideoListHandler, newVideoProcessServiceGetVideoListArgs, newVideoProcessServiceGetVideoListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videoprocess",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoprocess.VideoProcessServiceGetVideoInfoArgs)
	realResult := result.(*videoprocess.VideoProcessServiceGetVideoInfoResult)
	success, err := handler.(videoprocess.VideoProcessService).GetVideoInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoProcessServiceGetVideoInfoArgs() interface{} {
	return videoprocess.NewVideoProcessServiceGetVideoInfoArgs()
}

func newVideoProcessServiceGetVideoInfoResult() interface{} {
	return videoprocess.NewVideoProcessServiceGetVideoInfoResult()
}

func uploadVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoprocess.VideoProcessServiceUploadVideoArgs)
	realResult := result.(*videoprocess.VideoProcessServiceUploadVideoResult)
	success, err := handler.(videoprocess.VideoProcessService).UploadVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoProcessServiceUploadVideoArgs() interface{} {
	return videoprocess.NewVideoProcessServiceUploadVideoArgs()
}

func newVideoProcessServiceUploadVideoResult() interface{} {
	return videoprocess.NewVideoProcessServiceUploadVideoResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videoprocess.VideoProcessServiceGetVideoListArgs)
	realResult := result.(*videoprocess.VideoProcessServiceGetVideoListResult)
	success, err := handler.(videoprocess.VideoProcessService).GetVideoList(ctx, realArg.AuthorId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoProcessServiceGetVideoListArgs() interface{} {
	return videoprocess.NewVideoProcessServiceGetVideoListArgs()
}

func newVideoProcessServiceGetVideoListResult() interface{} {
	return videoprocess.NewVideoProcessServiceGetVideoListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVideoInfo(ctx context.Context, req *videoprocess.VideoInfoRequest) (r *videoprocess.VideoInfoResponse, err error) {
	var _args videoprocess.VideoProcessServiceGetVideoInfoArgs
	_args.Req = req
	var _result videoprocess.VideoProcessServiceGetVideoInfoResult
	if err = p.c.Call(ctx, "getVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadVideo(ctx context.Context, req *videoprocess.VideoProcessUploadRequest) (r *videoprocess.VideoProcessUploadResponse, err error) {
	var _args videoprocess.VideoProcessServiceUploadVideoArgs
	_args.Req = req
	var _result videoprocess.VideoProcessServiceUploadVideoResult
	if err = p.c.Call(ctx, "uploadVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, authorId int64) (r *videoprocess.VideoListResponse, err error) {
	var _args videoprocess.VideoProcessServiceGetVideoListArgs
	_args.AuthorId = authorId
	var _result videoprocess.VideoProcessServiceGetVideoListResult
	if err = p.c.Call(ctx, "getVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
