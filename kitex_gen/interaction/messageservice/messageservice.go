// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"runedance_douyin/kitex_gen/interaction"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*interaction.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":  kitex.NewMethodInfo(favoriteActionHandler, newMessageServiceFavoriteActionArgs, newMessageServiceFavoriteActionResult, false),
		"GetFavoriteList": kitex.NewMethodInfo(getFavoriteListHandler, newMessageServiceGetFavoriteListArgs, newMessageServiceGetFavoriteListResult, false),
		"CommentAction":   kitex.NewMethodInfo(commentActionHandler, newMessageServiceCommentActionArgs, newMessageServiceCommentActionResult, false),
		"GetCommentList":  kitex.NewMethodInfo(getCommentListHandler, newMessageServiceGetCommentListArgs, newMessageServiceGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.MessageServiceFavoriteActionArgs)
	realResult := result.(*interaction.MessageServiceFavoriteActionResult)
	success, err := handler.(interaction.MessageService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceFavoriteActionArgs() interface{} {
	return interaction.NewMessageServiceFavoriteActionArgs()
}

func newMessageServiceFavoriteActionResult() interface{} {
	return interaction.NewMessageServiceFavoriteActionResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.MessageServiceGetFavoriteListArgs)
	realResult := result.(*interaction.MessageServiceGetFavoriteListResult)
	success, err := handler.(interaction.MessageService).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetFavoriteListArgs() interface{} {
	return interaction.NewMessageServiceGetFavoriteListArgs()
}

func newMessageServiceGetFavoriteListResult() interface{} {
	return interaction.NewMessageServiceGetFavoriteListResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.MessageServiceCommentActionArgs)
	realResult := result.(*interaction.MessageServiceCommentActionResult)
	success, err := handler.(interaction.MessageService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceCommentActionArgs() interface{} {
	return interaction.NewMessageServiceCommentActionArgs()
}

func newMessageServiceCommentActionResult() interface{} {
	return interaction.NewMessageServiceCommentActionResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.MessageServiceGetCommentListArgs)
	realResult := result.(*interaction.MessageServiceGetCommentListResult)
	success, err := handler.(interaction.MessageService).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetCommentListArgs() interface{} {
	return interaction.NewMessageServiceGetCommentListArgs()
}

func newMessageServiceGetCommentListResult() interface{} {
	return interaction.NewMessageServiceGetCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *interaction.FavoriteRequest) (r *interaction.FavoriteResponse, err error) {
	var _args interaction.MessageServiceFavoriteActionArgs
	_args.Req = req
	var _result interaction.MessageServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *interaction.GetFavoriteListRequest) (r *interaction.GetFavoriteListResponse, err error) {
	var _args interaction.MessageServiceGetFavoriteListArgs
	_args.Req = req
	var _result interaction.MessageServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *interaction.CommentRequest) (r *interaction.CommentResponse, err error) {
	var _args interaction.MessageServiceCommentActionArgs
	_args.Req = req
	var _result interaction.MessageServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *interaction.GetCommentListRequest) (r *interaction.GetCommentListResponse, err error) {
	var _args interaction.MessageServiceGetCommentListArgs
	_args.Req = req
	var _result interaction.MessageServiceGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
