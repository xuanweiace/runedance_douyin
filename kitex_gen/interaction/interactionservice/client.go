// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	"runedance_douyin/kitex_gen/interaction"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FavoriteAction(ctx context.Context, req *interaction.FavoriteRequest, callOptions ...callopt.Option) (r *interaction.FavoriteResponse, err error)
	GetFavoriteList(ctx context.Context, req *interaction.GetFavoriteListRequest, callOptions ...callopt.Option) (r *interaction.GetFavoriteListResponse, err error)
	CommentAction(ctx context.Context, req *interaction.CommentRequest, callOptions ...callopt.Option) (r *interaction.CommentResponse, err error)
	GetCommentList(ctx context.Context, req *interaction.GetCommentListRequest, callOptions ...callopt.Option) (r *interaction.GetCommentListResponse, err error)
	GetFavoriteStatus(ctx context.Context, req *interaction.GetFavoriteStatusRequest, callOptions ...callopt.Option) (r *interaction.GetFavoriteStatusResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceClient struct {
	*kClient
}

func (p *kInteractionServiceClient) FavoriteAction(ctx context.Context, req *interaction.FavoriteRequest, callOptions ...callopt.Option) (r *interaction.FavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, req)
}

func (p *kInteractionServiceClient) GetFavoriteList(ctx context.Context, req *interaction.GetFavoriteListRequest, callOptions ...callopt.Option) (r *interaction.GetFavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteList(ctx, req)
}

func (p *kInteractionServiceClient) CommentAction(ctx context.Context, req *interaction.CommentRequest, callOptions ...callopt.Option) (r *interaction.CommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, req)
}

func (p *kInteractionServiceClient) GetCommentList(ctx context.Context, req *interaction.GetCommentListRequest, callOptions ...callopt.Option) (r *interaction.GetCommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCommentList(ctx, req)
}

func (p *kInteractionServiceClient) GetFavoriteStatus(ctx context.Context, req *interaction.GetFavoriteStatusRequest, callOptions ...callopt.Option) (r *interaction.GetFavoriteStatusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteStatus(ctx, req)
}
