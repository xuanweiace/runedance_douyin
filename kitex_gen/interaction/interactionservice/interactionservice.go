// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"runedance_douyin/kitex_gen/interaction"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

var interactionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":    kitex.NewMethodInfo(favoriteActionHandler, newInteractionServiceFavoriteActionArgs, newInteractionServiceFavoriteActionResult, false),
		"GetFavoriteList":   kitex.NewMethodInfo(getFavoriteListHandler, newInteractionServiceGetFavoriteListArgs, newInteractionServiceGetFavoriteListResult, false),
		"CommentAction":     kitex.NewMethodInfo(commentActionHandler, newInteractionServiceCommentActionArgs, newInteractionServiceCommentActionResult, false),
		"GetCommentList":    kitex.NewMethodInfo(getCommentListHandler, newInteractionServiceGetCommentListArgs, newInteractionServiceGetCommentListResult, false),
		"GetFavoriteStatus": kitex.NewMethodInfo(getFavoriteStatusHandler, newInteractionServiceGetFavoriteStatusArgs, newInteractionServiceGetFavoriteStatusResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceFavoriteActionArgs)
	realResult := result.(*interaction.InteractionServiceFavoriteActionResult)
	success, err := handler.(interaction.InteractionService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceFavoriteActionArgs() interface{} {
	return interaction.NewInteractionServiceFavoriteActionArgs()
}

func newInteractionServiceFavoriteActionResult() interface{} {
	return interaction.NewInteractionServiceFavoriteActionResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetFavoriteListArgs)
	realResult := result.(*interaction.InteractionServiceGetFavoriteListResult)
	success, err := handler.(interaction.InteractionService).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetFavoriteListArgs() interface{} {
	return interaction.NewInteractionServiceGetFavoriteListArgs()
}

func newInteractionServiceGetFavoriteListResult() interface{} {
	return interaction.NewInteractionServiceGetFavoriteListResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCommentActionArgs)
	realResult := result.(*interaction.InteractionServiceCommentActionResult)
	success, err := handler.(interaction.InteractionService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCommentActionArgs() interface{} {
	return interaction.NewInteractionServiceCommentActionArgs()
}

func newInteractionServiceCommentActionResult() interface{} {
	return interaction.NewInteractionServiceCommentActionResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetCommentListArgs)
	realResult := result.(*interaction.InteractionServiceGetCommentListResult)
	success, err := handler.(interaction.InteractionService).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetCommentListArgs() interface{} {
	return interaction.NewInteractionServiceGetCommentListArgs()
}

func newInteractionServiceGetCommentListResult() interface{} {
	return interaction.NewInteractionServiceGetCommentListResult()
}

func getFavoriteStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetFavoriteStatusArgs)
	realResult := result.(*interaction.InteractionServiceGetFavoriteStatusResult)
	success, err := handler.(interaction.InteractionService).GetFavoriteStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetFavoriteStatusArgs() interface{} {
	return interaction.NewInteractionServiceGetFavoriteStatusArgs()
}

func newInteractionServiceGetFavoriteStatusResult() interface{} {
	return interaction.NewInteractionServiceGetFavoriteStatusResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *interaction.FavoriteRequest) (r *interaction.FavoriteResponse, err error) {
	var _args interaction.InteractionServiceFavoriteActionArgs
	_args.Req = req
	var _result interaction.InteractionServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *interaction.GetFavoriteListRequest) (r *interaction.GetFavoriteListResponse, err error) {
	var _args interaction.InteractionServiceGetFavoriteListArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *interaction.CommentRequest) (r *interaction.CommentResponse, err error) {
	var _args interaction.InteractionServiceCommentActionArgs
	_args.Req = req
	var _result interaction.InteractionServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *interaction.GetCommentListRequest) (r *interaction.GetCommentListResponse, err error) {
	var _args interaction.InteractionServiceGetCommentListArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteStatus(ctx context.Context, req *interaction.GetFavoriteStatusRequest) (r *interaction.GetFavoriteStatusResponse, err error) {
	var _args interaction.InteractionServiceGetFavoriteStatusArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetFavoriteStatusResult
	if err = p.c.Call(ctx, "GetFavoriteStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
