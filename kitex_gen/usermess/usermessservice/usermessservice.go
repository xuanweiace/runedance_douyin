// Code generated by Kitex v0.4.4. DO NOT EDIT.

package usermessservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"runedance_douyin/kitex_gen/usermess"
)

func serviceInfo() *kitex.ServiceInfo {
	return usermessServiceServiceInfo
}

var usermessServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UsermessService"
	handlerType := (*usermess.UsermessService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister": kitex.NewMethodInfo(userRegisterHandler, newUsermessServiceUserRegisterArgs, newUsermessServiceUserRegisterResult, false),
		"UserLogin":    kitex.NewMethodInfo(userLoginHandler, newUsermessServiceUserLoginArgs, newUsermessServiceUserLoginResult, false),
		"GetUserMess":  kitex.NewMethodInfo(getUserMessHandler, newUsermessServiceGetUserMessArgs, newUsermessServiceGetUserMessResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "usermess",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usermess.UsermessServiceUserRegisterArgs)
	realResult := result.(*usermess.UsermessServiceUserRegisterResult)
	success, err := handler.(usermess.UsermessService).UserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUsermessServiceUserRegisterArgs() interface{} {
	return usermess.NewUsermessServiceUserRegisterArgs()
}

func newUsermessServiceUserRegisterResult() interface{} {
	return usermess.NewUsermessServiceUserRegisterResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usermess.UsermessServiceUserLoginArgs)
	realResult := result.(*usermess.UsermessServiceUserLoginResult)
	success, err := handler.(usermess.UsermessService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUsermessServiceUserLoginArgs() interface{} {
	return usermess.NewUsermessServiceUserLoginArgs()
}

func newUsermessServiceUserLoginResult() interface{} {
	return usermess.NewUsermessServiceUserLoginResult()
}

func getUserMessHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usermess.UsermessServiceGetUserMessArgs)
	realResult := result.(*usermess.UsermessServiceGetUserMessResult)
	success, err := handler.(usermess.UsermessService).GetUserMess(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUsermessServiceGetUserMessArgs() interface{} {
	return usermess.NewUsermessServiceGetUserMessArgs()
}

func newUsermessServiceGetUserMessResult() interface{} {
	return usermess.NewUsermessServiceGetUserMessResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, req *usermess.DouyinUserRegisterRequest) (r *usermess.DouyinUserRegisterResponse, err error) {
	var _args usermess.UsermessServiceUserRegisterArgs
	_args.Req = req
	var _result usermess.UsermessServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *usermess.DouyinUserLoginRequest) (r *usermess.DouyinUserLoginResponse, err error) {
	var _args usermess.UsermessServiceUserLoginArgs
	_args.Req = req
	var _result usermess.UsermessServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserMess(ctx context.Context, req *usermess.DouyinUserRequest) (r *usermess.DouyinUserResponse, err error) {
	var _args usermess.UsermessServiceGetUserMessArgs
	_args.Req = req
	var _result usermess.UsermessServiceGetUserMessResult
	if err = p.c.Call(ctx, "GetUserMess", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
